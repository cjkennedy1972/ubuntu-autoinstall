---
- hosts: localhost
  name: util_DeployUbuntu.yml
  gather_facts: false
  vars:
    TempDir: /tmp
    WorkingDir: /tmp/ubuntu20
    UbuntuISO: ubuntu-20.04.1-live-server-amd64.iso
    UbuntuISO_URL: https://releases.ubuntu.com/20.04/ubuntu-20.04.1-live-server-amd64.iso
    UbuntuNewISO: ubuntu2004.iso
    ESXiHost: esxi03.demo.local
    ESXiUser: root
    ESXiPassword: VMware1!
    DataCenter: ha-datacenter
    vSphereCluster: ""
    VMFolder: ha-datacenter/vm
    DataStore: Local_VMs
    DataStoreDir: /SDDCLab-ISO-Folder
    UbuntuVMName: ubuntu-server
    UbuntuVMDiskSize: 50           # gigabytes
    UbuntuVMMemorySize: 2048       # megabytes
    UbuntuVMCPUs: 1
    UbuntuVMCPUCores: 1
    UbuntuVMPortGroup: Lab-Routers
    UbuntuOSLocale: en_US
    UbuntuOSKeyboardLayout: en
    UbuntuOSKeyboardVariant: us
    UbuntuOSIPv4Address: 10.203.0.50/24
    UbuntuOSIPv4Gateway: 10.203.0.1
    UbuntuOSIPv4DNS: 10.203.0.5
    UbuntuOSSearchDomain: sddc.lab
    UbuntuOSHostname: my-server
    UbuntuOSUser: ubuntu
    UbuntuOSPassword: VMware1!
  tasks:
    - name: Create working directory on Ansible Controller
      file:
        path: "{{ WorkingDir }}"
        state: directory

    - name: Check if Ubuntu ISO exists locally on Ansible Controller
      stat:
        path: "{{ TempDir }}/{{ UbuntuISO }}"
      register: InstallerFileCheck

    - name: Download Ubuntu ISO (if ISO file doesn't exist locally)
      get_url:
        url:  "{{ UbuntuISO_URL }}"
        dest: "{{ TempDir }}/{{ UbuntuISO }}"
      when:
        - InstallerFileCheck.stat.exists != true
        
    - name: Mount Ubuntu ISO
      action: mount name="{{ WorkingDir }}/iso" src="{{ TempDir }}/{{ UbuntuISO }}" opts=loop fstype=iso9660 state=mounted

    - name: Copy txt.cfg from Ubuntu ISO
      copy: 
        src: "{{ WorkingDir }}/iso/isolinux/txt.cfg"
        dest: "{{ WorkingDir }}/isocopy/isolinux/"
        mode: "666"

    - name: Edit txt.cfg to modify append line 
      replace:
        dest: "{{ WorkingDir }}/isocopy/isolinux/txt.cfg"
        regexp: 'append   initrd=/casper/initrd quiet  ---'
        replace: 'append   initrd=/casper/initrd quiet --- autoinstall ds=nocloud;s=/cdrom/autoinstall/'

    - name: Create directory to store user-data and meta-data
      file:
        path: "{{ WorkingDir }}/isocopy/autoinstall"
        state: directory

    - name: Copy user-data file to directory
      template: 
        src: ./user-data.j2
        dest: "{{ WorkingDir }}/isocopy/autoinstall/user-data"
        mode: "666"

    - name: Create empty meta-data file in directory
      file:
        path: "{{ WorkingDir }}/isocopy/autoinstall/meta-data"
        state: touch
        mode: "666"

    - name: Create custom Ubuntu ISO
      command: "xorrisofs -relaxed-filenames -J -R -o {{ TempDir }}/{{ UbuntuNewISO }} -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table {{ WorkingDir }}/iso/ {{ WorkingDir }}/isocopy/"
      args:
        chdir: "{{ WorkingDir }}/isocopy/"

    - name: Unmount Ubuntu ISO
      action: mount name="{{ WorkingDir }}/iso" src="{{ TempDir }}/{{ UbuntuISO }}" fstype=iso9660 state=absent

    - name: Upload the custom Ubuntu ISO to the vSphere datastore
      vsphere_copy: 
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        datacenter: "{{ DataCenter }}"
        src: "{{ TempDir }}/{{ UbuntuNewISO }}" 
        datastore: "{{ DataStore }}"
        path: "{{ DataStoreDir }}/{{ UbuntuNewISO }}"

    - name: Deploy Ubuntu VM
      vmware_guest:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        name: "{{ UbuntuVMName }}"
        state: poweredon
        guest_id: ubuntu64Guest
        cluster: "{{ vSphereCluster }}"
        datacenter: "{{ DataCenter }}"
        folder: "{{ VMFolder }}"
        disk:
        - size_gb: "{{ UbuntuVMDiskSize }}"
          type: thin
          datastore: "{{ DataStore }}"
        hardware:
          memory_mb: "{{ UbuntuVMMemorySize }}"
          num_cpus: "{{ UbuntuVMCPUs }}"
          num_cpu_cores_per_socket: "{{ UbuntuVMCPUCores }}"
          scsi: paravirtual
        networks:
          - name: "{{ UbuntuVMPortGroup }}"
            device_type: vmxnet3
        cdrom:
          type: iso
          iso_path: "[{{ DataStore }}] {{ DataStoreDir }}/{{ UbuntuNewISO }}"
        annotation: | 
                    *** Auto-Deployed by Ansible ***
                    Username: {{ UbuntuOSUser }}
                    Password: {{ UbuntuOSPassword }}

    - name: Start checking if the Ubuntu VM is ready
      vmware_guest_info:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        datacenter: "{{ DataCenter }}"
        validate_certs: no
        name: "{{ UbuntuVMName }}"
        schema: vsphere
      register: vm_facts
      until: vm_facts.instance.guest.hostName is search(UbuntuOSHostname)
      retries: 30
      delay: 60

    - name: Set password for the Ubuntu user
      vmware_vm_shell:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/echo
        vm_shell_args: "'{{ UbuntuOSUser }}:{{ UbuntuOSPassword }}' | sudo chpasswd"

    - name: Copy network configuration file to working directory
      template: 
        src: ./00-installer-config.j2
        dest: "{{ WorkingDir }}/00-installer-config.yaml"

    - name: Copy network configuration file to Ubuntu VM
      vmware_guest_file_operation:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: VMware1!
        copy:
            src: "{{ WorkingDir }}/00-installer-config.yaml"
            dest: "/home/{{ UbuntuOSUser }}/00-installer-config.yaml"

    - name: Move network configuration file to right location on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/sudo
        vm_shell_args: "mv /home/{{ UbuntuOSUser }}/00-installer-config.yaml /etc/netplan/00-installer-config.yaml"

    - name: Appply the network configuration on Ubuntu VM
      vmware_vm_shell:
        hostname: "{{ ESXiHost }}"
        username: "{{ ESXiUser }}"
        password: "{{ ESXiPassword }}"
        validate_certs: no
        vm_id: "{{ UbuntuVMName }}"
        vm_username: "{{ UbuntuOSUser }}"
        vm_password: VMware1!
        vm_shell: /usr/bin/sudo
        vm_shell_args: netplan apply

    - name: Delete working directory on Ansible controller
      file:
        path: "{{ WorkingDir }}"
        state: absent
